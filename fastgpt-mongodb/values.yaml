# Default values for fastgpt-mongodb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.cn-hangzhou.aliyuncs.com/fastgpt/mongo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "5.0.18"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 27017

#command: ["bash", "-c", "openssl rand -base64 128 > /data/mongodb.key; chmod 400 /data/mongodb.key; chown 999:999 /data/mongodb.key; exec docker-entrypoint.sh $$@ & until mongo -u myusername -p mypassword --authenticationDatabase admin --eval \"print\\('waited for connection'\\)\" > /dev/null 2>&1; do echo 'Waiting for MongoDB to start...'; sleep 2; done; mongosh -u myusername -p mypassword --authenticationDatabase admin --eval \"const isInited = rs.status().ok === 1; if(!isInited){rs.initiate({_id: 'rs0', members: [{ _id: 0, host: 'fastgpt-mongodb:27017' }]})}\"; wait $$!"]
command:
  - bash
  - -c
  - |
    openssl rand -base64 128 > /data/mongodb.key
    chmod 400 /data/mongodb.key
    chown 999:999 /data/mongodb.key
    echo 'const isInited = rs.status().ok === 1
    if(!isInited){
      rs.initiate({
          _id: "rs0",
          members: [
              { _id: 0, host: "fastgpt-mongodb:27017" }
          ]
      })
    }' > /data/initReplicaSet.js
    exec docker-entrypoint.sh "$$@" &
    until mongo -u myusername -p mypassword --authenticationDatabase admin --eval "print('waited for connection')" > /dev/null 2>&1; do
      echo "Waiting for MongoDB to start..."
      sleep 2
    done
    mongo -u myusername -p mypassword --authenticationDatabase admin /data/initReplicaSet.js
    wait $$!

args: ["mongod", "--keyFile", "/data/mongodb.key", "--replSet", "rs0"]

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 4000m
    memory: 8000Mi
  requests:
    cpu: 2000m
    memory: 4000Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: fastgpt-mongodb-pv
  persistentVolumeClaim:
    claimName: fastgpt-mongodb-pvc

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: fastgpt-mongodb-pv
  mountPath: /data/db

dotenv:
  enabled: true
  data:
    MONGO_INITDB_ROOT_USERNAME: myusername
    MONGO_INITDB_ROOT_PASSWORD: mypassword

nodeSelector: {}

tolerations: []

affinity: {}
